<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
	<class name="com.pairoo.domain.Address" table="ADDRESS">
		<!-- column (optional - defaults to the property name): the name of the 
			primary key column. class = increment, identity, sequence, hilo, seqhilo, 
			uuid, guid, native, assigned, select, foreign, sequence-identity -->
		<id name="id" column="ID" type="java.lang.Long">
			<generator class="org.hibernate.id.enhanced.TableGenerator">
				<param name="table_name">ID_SEQUENCES</param>
				<!-- <param name="value_column_name">next_val</param> -->
				<!-- <param name="segment_column_name">sequence_name</param> -->
				<param name="segment_value">com.pairoo.domain.Address</param>
				<!-- <param name="segment_value_length">255</param> -->
				<!-- <param name="initial_value">1</param> -->
				<param name="increment_size">10</param>
				<param name="optimizer">pooled</param>
			</generator>
		</id>
		<version column="VERSION_ID" name="version" type="java.lang.Integer"
			unsaved-value="null" />

		<!-- property: type could be: 1. The name of a Hibernate basic type: integer, 
			string, character, date, timestamp, float, binary, serializable, object, 
			blob etc. 2. The name of a Java class with a default basic type: int, float, 
			char, java.lang.String, java.util.Date, java.lang.Integer, java.sql.Clob 
			etc. 3. The name of a serializable Java class. 4. The class name of a custom 
			type: com.illflow.type.MyCustomType etc. -->
		<property name="uuid" type="java.lang.String">
			<column name="UUID" />
		</property>

		<!-- column (optional - defaults to the property name): the name of the 
			column holding the version number. name: the name of a property of the persistent 
			class. type (optional - defaults to integer): the type of the version number. 
			access (optional - defaults to property): the strategy Hibernate uses to 
			access the property value. unsaved-value (optional - defaults to undefined): 
			a version property value that indicates that an instance is newly instantiated 
			(unsaved), distinguishing it from detached instances that were saved or loaded 
			in a previous session. Undefined specifies that the identifier property value 
			should be used. generated (optional - defaults to never): specifies that 
			this version property value is generated by the database. See the discussion 
			of generated properties for more information. insert (optional - defaults 
			to true): specifies whether the version column should be included in SQL 
			insert statements. It can be set to false if the database column is defined 
			with a default value of 0. -->


		<property name="zipcode" type="java.lang.String">
			<column name="ZIPCODE" />
		</property>
		<property name="street" type="java.lang.String">
			<column name="STREET" />
		</property>
		<property name="housenr" type="java.lang.String">
			<column name="HOUSENR" />
		</property>
		<property name="city" type="java.lang.String">
			<column name="CITY" />
		</property>
		<property name="country">
			<column name="COUNTRY" />
			<type name="org.hibernate.type.EnumType">
				<param name="type">12</param>
				<param name="enumClass">com.datazuul.framework.domain.geo.Country</param>
			</type>
		</property>
		<!-- read only geolocations -->
		<many-to-one name="geoLocation"
			class="com.datazuul.framework.domain.geo.GeoLocation" fetch="join"
			cascade="none" lazy="false">
			<column name="GEOLOCATION_ID" />
		</many-to-one>
	</class>
</hibernate-mapping>
